setwd("../6001-161/")
source('~/Desktop/Caths/Catheters.R')
knitr::opts_chunk$set(echo = FALSE)
img = mni_img()
mni_i
mni_img()
?mni_img()
?mni_img
library(fslr)
img = mni_img()
library(fslr)
img = mni_img()
img
ortho2(img)
img = mni_img(brain = TRUE)
library(fslr)
img = mni_img(brain = TRUE)
img = dropEmptyImageDimensions(img)
ortho2(img)
library(manipulate)
?manipulate
citation("manipulate")
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(papayar)
papaya(imgs, outdir = ".")
papaya(img, outdir = ".")
embed_papaya()
embed_papaya
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(fslr)
img = mni_img(brain = TRUE)
img = dropEmptyImageDimensions(img)
img = mni_img(brain = TRUE)
img = dropEmptyImageDimensions(img)
ortho2(img)
writenii(img, "reduced_mni.nii.gz")
library(papayar)
embed_papaya("reduced_mni.nii.gz", outdir = ".")
x = embed_papaya("reduced_mni.nii.gz", outdir = ".")
x
embed_papaya
index.file <- system.file("embed.html", package="papayar")
index.file
readLines(index.file)
cat(readLines(index.file))
library(papayar)
hist(c(img))
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
img = dropEmptyImageDimensions(img)
library(fslr)
img = mni_img(brain = TRUE)
img = dropEmptyImageDimensions(img)
hist(c(img))
thresh = img > 6500
ortho2(img, thresh)
thresh = img > 7000
writenii(thresh, "threshold.nii.gz")
ortho2(img, thresh)
hist(c(img))
thresh = img > 7500
writenii(thresh, "threshold.nii.gz")
ortho2(img, thresh)
system("open .")
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
img = mni_img(brain = TRUE)
library(fslr)
library(extrantsr)
img = mni_img(brain = TRUE)
library(extrantsr)
img = mni_img(brain = TRUE)
img = dropEmptyImageDimensions(img)
img = mni_img(brain = TRUE)
img = dropEmptyImageDimensions(img)
writenii(img, "reduced_mni.nii.gz")
library(fslr)
library(extrantsr)
img_fname = "reduced_mni.nii.gz"
if (!file.exists(img_fname)){
img = mni_img(brain = TRUE)
img = dropEmptyImageDimensions(img)
writenii(img, img_fname)
} else {
img = readnii(img_fname)
}
img = mni_img(brain = TRUE)
mask = mni_img(brain = TRUE, mask = TRUE)
dd = dropEmptyImageDimensions(mask,
other.imgs = img)
img = dd$other.imgs[[1]]
img
dd$other.imgs
img = dd$other.imgs
mask = dd$outimg
img = dd$other.imgs
writenii(img, img_fname)
mask = dd$outimg
writenii(mask, mask_fname)
mask_fname = "reduced_mni_mask.nii.gz"
writenii(mask, mask_fname)
img = readnii(img_fname)
mask = readnii(mask_fname)
ortho2(img, mask)
wm_fname = "mni_wm.nii.gz"
img
oimg = otropos(a = img, x = mask)
res = oimg
wm = res$segmentation
wm = res$segmentation == 3
ortho2(img, wm)
ortho2(img, res$segmentation==2)
ortho2(img, res$segmentation==3)
ortho2(img, res$segmentation==q)
ortho2(img, res$segmentation==1)
library(WhiteStripe)
system.file(package = "WhiteStripe")
system("open /Library/Frameworks/R.framework/Versions/3.3/Resources/library/WhiteStripe")
download_img_data()
system("open /Library/Frameworks/R.framework/Versions/3.3/Resources/library/WhiteStripe")
library(fslr)
library(extrantsr)
library(WhiteStripe)
download_img_data()
img_fname = "reduced_t1.nii.gz"
mask_fname = "reduced_t1_mask.nii.gz"
if (!all(file.exists(c(img_fname,
t1_fname = system.file("T1Strip.nii.gz",
package = "WhiteStripe")
img = readnii(t1_fname)
mask = t1 > 0
t1_fname = system.file("T1Strip.nii.gz",
package = "WhiteStripe")
img = readnii(t1_fname)
mask = img > 0
dd = dropEmptyImageDimensions(mask,
other.imgs = img)
dd = dropEmptyImageDimensions(mask,
other.imgs = img)
img = dd$other.imgs
writenii(img, img_fname)
mask = dd$outimg
writenii(mask, mask_fname)
ortho2(img, mask)
img = readnii(img_fname)
mask = readnii(mask_fname)
wm_fname = "t1_wm.nii.gz"
res = otropos(a = img, x = mask)
wm = res$segmentation == 3
ortho2(img, wm)
ortho2(img, res$segmentation == 1)
ortho2(img, res$segmentation == 2)
dim(img)
seg_fname = "t1_seg.nii.gz"
writenii(seg, seg_fname)
seg = res$segmentation
writenii(seg, seg_fname)
csf = res$segmentation == 1
ortho2(img, csf)
ortho2(robust_window(img), csf)
i2 = fslswapdim(img, a = "-x")
t2 = fslswapdim(seg_img, a = "-x")
seg_img = seg == 1
t2 = fslswapdim(seg_img, a = "-x")
dir()
?dir()
dir(pattern = 'papaya')
list.files(pattern = 'papaya')
system("open")
system("open ")
system("open .")
list.files(pattern = 'papaya')
list.files(pattern = 'papaya', include.dirs = FALSE)
list.files(pattern = 'papaya', full.names = TRUE,include.dirs = FALSE)
list.files(pattern = 'papaya', full.names = TRUE, include.dirs = TRUE)
list.files(pattern = 'papaya', full.names = TRUE,include.dirs = FALSE)
list.dirs(pattern = 'papaya', full.names = TRUE,include.dirs = FALSE)
list.dirs(pattern = 'papaya', full.names = TRUE)
list.dirs(full.names = TRUE)
list.dirs(recursive = TRUE)
list.dirs(recursive = FALSE)
list.dirs(pattern = 'papaya', full.names = TRUE)
dir(pattern = 'papaya')
library(animation)
?animation
citation("animatino")
citation("animation")
citation(package = "animation")
x = citation(package = "animation")
x
class(x)
names(x)
x[[1]]
x[[2]]
dim(img)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(fslr)
library(extrantsr)
library(WhiteStripe)
x = download_img_data()
rm(list = 'x')
img_fname = "reduced_t1.nii.gz"
mask_fname = "reduced_t1_mask.nii.gz"
if (!all(file.exists(c(img_fname,
mask_fname)))) {
t1_fname = system.file("T1Strip.nii.gz",
package = "WhiteStripe")
img = readnii(t1_fname)
mask = img > 0
dd = dropEmptyImageDimensions(mask,
other.imgs = img)
img = dd$other.imgs
writenii(img, img_fname)
mask = dd$outimg
writenii(mask, mask_fname)
} else {
img = readnii(img_fname)
mask = readnii(mask_fname)
}
seg_fname = "t1_seg.nii.gz"
if (!file.exists(seg_fname)) {
res = otropos(a = img, x = mask)
seg = res$segmentation
writenii(seg, seg_fname)
} else {
seg = readnii(seg_fname)
}
seg_img = seg == 1
i2 = fslswapdim(img, a = "-x")
t2 = fslswapdim(seg_img, a = "-x")
ortho2(i2, add.orient = FALSE)
dim(i2)
nsli(ii2)
nsli(i2)
seq_along(nz)
nz = nsli(i2)
seq_along(nz)
nz
seq(nz)
nz = nsli(i2)
# n_slices = nz
n_slices = 10
slices = nz/n_slices
slices
slices = cut(seq(nz), breaks=n_slices)
slices
nz = nsli(i2)
# n_slices = nz
n_slices = 10
seq(1/(n_slices*2), 1-1/(n_slices*2), length.out = nsli())
seq(1/(n_slices*2), 1-1/(n_slices*2), length.out = n_slices
)
seq(1/(n_slices*2), 1-1/(n_slices*2), length.out = n_slices)
n_slices = nz
nz = nsli(i2)
# n_slices = nz
n_slices = 10
probs = seq(1/(n_slices*2),
1-1/(n_slices*2),
length.out = n_slices)
probs
# n_slices = nz
nz = nsli(i2)
n_slices = nz
# n_slices = 10
probs = seq(1/(n_slices*2),
1-1/(n_slices*2),
length.out = n_slices)
probs
slices = quantile(seq(nz), probs = probs)
slices
slices = floor(quantile(seq(nz), probs = probs))
slcies
slices
nz = nsli(i2)
n_slices = nz
# n_slices = 10
probs = seq(1/(n_slices*2),
1-1/(n_slices*2),
length.out = n_slices)
slices = round(quantile(seq(nz), probs = probs))
slices = unique(slices)
slices
nz = nsli(i2)
# n_slices = nz
n_slices = 10
probs = seq(1/(n_slices*2),
1-1/(n_slices*2),
length.out = n_slices)
slices = round(quantile(seq(nz), probs = probs))
slices = unique(slices)
slices
diff(slices)
tempfile(fileext = "%04d.png")
overlay(x = i2, y = t2)
?overlay(x = i2, y = t2)
library(msseg)
nz = nsli(i2)
# n_slices = nz
n_slices = 10
probs = seq(1/(n_slices*2),
1-1/(n_slices*2),
length.out = n_slices)
slices = round(quantile(seq(nz), probs = probs))
slices = unique(slices)
tstub = tempfile()
tfile = paste0(tstub, "%04d.png")
png(tfile,
res = 300,
height = 7,
width = 7,
units = "in",
type = "cairo")
for (slice in slices) {
overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
}
for (slice in slices) {
overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
}
dev.off()
outname = "slice_movie.gif"
png_converter(
paste0(tstub, "*.png"),
outname)
tstub
dir(tempdir())
tfile
dev.off)
tstub = tempfile()
tfile = paste0(tstub, "%04d.png")
png(tfile,
res = 300,
height = 7,
width = 7,
units = "in",
type = "cairo")
for (slice in slices) {
overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
}
dev.off()
tfile
dev.off()
tstub = tempfile()
tfile = paste0(tstub, "_%04d.png")
png(tfile,
res = 300,
height = 7,
width = 7,
units = "in",
type = "cairo")
for (slice in slices) {
overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
}
dev.cur()
slice
overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
?overlay
oro.nifti::overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
dev.off()
slice
oro.nifti::overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
dev.off()
o2
i2
t2
overlay(i2, t2)
overlay2
oro.nifti::overlay(x = i2, y = t2,
z = slice,
plot.type = "single")
i2[,,slice]
t2[,,slice]
overlay
t3 = t2
t3[t2 == 0] = NA
oro.nifti::overlay(x = i2, y = t3,
z = slice,
plot.type = "single")
oro.nifti::overlay(x = i2,
z = slice,
plot.type = "single")
oro.nifti::overlay(x = i2,
y = i2,
z = slice,
plot.type = "single")
oro.nifti::overlay(x = i2, y = t3,
z = slice,
plot.type = "single")
for (slice in slices) {
oro.nifti::overlay(x = i2, y = t3,
z = slice,
plot.type = "single")
}
oro.nifti::overlay(x = i2, y = t3,
z = slice,
col.y = "green",
plot.type = "single")
?png_converter()
png_converter
library(msseg)
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
library(papayar)
x = papaya_div()
x
cat(x)
?rgb
source('~/Dropbox/Public/WordPress_Hopstat/A_small_neuroimage_interactive_plotter/A_small_neuroimage_interactive_plotter.R')
img
iplot(img )
system('open .')
knitr::opts_chunk$set(echo = FALSE,
warning = FALSE,
message = FALSE)
t1_fname = system.file("T1Strip.nii.gz",
package = "WhiteStripe")
img = readnii(t1_fname)
library(fslr)
library(extrantsr)
library(WhiteStripe)
x = download_img_data()
rm(list = 'x')
img_fname = "reduced_t1.nii.gz"
mask_fname = "reduced_t1_mask.nii.gz"
t1_fname = system.file("T1Strip.nii.gz",
package = "WhiteStripe")
img = readnii(t1_fname)
dim(img)
?image
ortho2(img, useRaster = TRUE)
ortho2(img, useRaster = FALSE)
dev.off()
system.time({ortho2(img, useRaster = TRUE)})
dev.off()
system.time({ortho2(img, useRaster = FALSE)})
library(fslr)
library(extrantsr)
library(WhiteStripe)
x = download_img_data()
rm(list = 'x')
img_fname = "reduced_t1.nii.gz"
mask_fname = "reduced_t1_mask.nii.gz"
if (!all(file.exists(c(img_fname,
mask_fname)))) {
t1_fname = system.file("T1Strip.nii.gz",
package = "WhiteStripe")
img = readnii(t1_fname)
mask = img > 0
dd = dropEmptyImageDimensions(mask,
other.imgs = img)
img = dd$other.imgs
writenii(img, img_fname)
mask = dd$outimg
writenii(mask, mask_fname)
} else {
img = readnii(img_fname)
mask = readnii(mask_fname)
}
iplot = function(img, plane = c("axial",
"coronal", "sagittal"),
useRaster = TRUE, ...){
## pick the plane
plane = match.arg(plane, c("axial",
"coronal", "sagittal"))
# Get the max number of slices in that plane for the slider
ns=  switch(plane,
"axial"=dim(img)[3],
"coronal"=dim(img)[2],
"sagittal"=dim(img)[1])
## run the manipulate command
manipulate({
image(img, z = z, plot.type= "single",
plane = plane,
useRaster =useRaster, ...)
# this will return mouse clicks (future experimental work)
pos <- manipulatorMouseClick()
if (!is.null(pos)) {
print(pos)
}
},
## make the slider
z = slider(1, ns, step=1, initial = ceiling(ns/2))
)
}
library(manipulate)
iplot(img)
dev.off()
iplot(img, useRaster = FALSE)
dev.off()
